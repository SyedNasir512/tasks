# -*- coding: utf-8 -*-
"""WEEK 10 TASKS PRE TRAINED MODEL AND FINE TUNE THE MODEL .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uk1pq7Puui-bbHiYHzT4GSHO_U7ntkhs
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import load_model
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Load the CSV data
csv_file = '/content/diabetes.csv'
data = pd.read_csv(csv_file)

X = data.iloc[:, 0:8].values  # Features
y = data.iloc[:, 8].values   # Labels

# Split data into two parts
X_train_full, X_temp, y_train_full, y_temp = train_test_split(X, y, test_size=0.2, random_state=0)
X_val, X_fine_tune, y_val, y_fine_tune = train_test_split(X_temp, y_temp, test_size=0.2, random_state=0)

# Standardize data
scaler = StandardScaler()
X_train_full = scaler.fit_transform(X_train_full)
X_val = scaler.transform(X_val)
X_fine_tune = scaler.transform(X_fine_tune)

# Build and compile the ANN model
def build_model():
    model = Sequential([
        Dense(64, activation='relu', input_shape=(X_train_full.shape[1],)),
        Dense(32, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Train the original model
model = build_model()
model.fit(X_train_full, y_train_full, epochs=10, batch_size=32, validation_data=(X_val, y_val))


accuracy = model.evaluate(X_val, y_val, verbose=0)[1]
print(f"Original model accuracy: {accuracy * 100:.2f}%")

# Save the original model
model.save('original_model.h5')

# Load the original model
model = load_model('original_model.h5')

# Recompile the model with the optimizer
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Fine-tune the model with the remaining data
model.fit(X_fine_tune, y_fine_tune, epochs=5, batch_size=32, validation_data=(X_val, y_val))

# Save the fine-tuned model
model.save('fine_tuned_model.h5')

# Display a summary of the fine-tuned model
model.summary()

loss, accuracy = model.evaluate(X_val, y_val, verbose=0) # Use 'model' instead of 'extended_model'
print(f"Fine-tuned model accuracy: {accuracy * 100:.2f}%")

# Display a summary of the fine-tuned model
model.summary() # Use 'model' instead of 'extended_model'